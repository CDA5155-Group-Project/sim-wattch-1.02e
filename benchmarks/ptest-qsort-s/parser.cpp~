#include <iostream>
#include <dirent.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <time.h>
#include <map>
#include <fstream>

using namespace std;

map<string, int> mainBTBc; //cleared
map<string, int> mainBTBn; //non-cleared

string GetCurrentDir()
{
   //command "pwd"
   char buff[100];
   if(getcwd(buff, 100)==NULL)
   {
      printf("Error: can't get cwd");
      exit(-1);
   }
   
   return buff;
}

int ContainsInt(string word)
{
	for(int i = 0; i < (int) word.length(); i++)
	{
		if(word[i] == '1') return 1;
		if(word[i] == '0') return 0;
	}

	return -2;
}

bool IsExistInN(string key)
{
	map<string, int>::iterator it;
	for(it = mainBTBn.begin(); it != mainBTBn.end(); it++)
	{
		if(strcmp(key.c_str(), it->first.c_str()) == 0 )
		{
			return true;
		}
	}

	return false;
}

bool IsExistInC(string key)
{
	map<string, int>::iterator it;
	for(it = mainBTBc.begin(); it != mainBTBc.end(); it++)
	{
		if(strcmp(key.c_str(), it->first.c_str()) == 0 )
		{
			return true;
		}
	}

	return false;
}


int main(int argc, char * argv[]){

  int c_intervalNum = 0;
  int n_intervalNum = 0;
  int branchNum = 0;

  int symbol = 0;
  
  string dir  = GetCurrentDir();
  
  dir.append("/btbs/");
  
  DIR * directory;

  if( (directory = opendir(dir.c_str())) == NULL )
    {
      cout << "Error in opendir()"<< endl;
      exit(-1);
    }
  
  struct dirent * file;

  while( (file = readdir(directory)) != NULL )
  {
    if ( file->d_name[0] == '.')
    {
	   continue;
    }

	string filename = dir;
	filename.append(file->d_name);
	ifstream reader(filename.c_str());

	if( !reader )
	{
		cout << "Cannot read file: " << filename << endl;
		return -1;
	 }
	
	int isCleared = ContainsInt(filename);

	if( isCleared == 1)
	{
	   c_intervalNum++;
	}
	else
	{
		n_intervalNum++;
	}
	
	while( !reader.eof())
	{
		string line;
		getline(reader, line);

		if(line.length() < 5) continue;

		string key;
		int index = line.find_first_of(",");
		key = line.substr(0, index);

		if(isCleared == 1)
		{
			if( IsExistInC(key) )
			{
			    int temp = mainBTBc[key];
			    temp++;
			    mainBTBc[key] = temp;
		    }
		    else
	    	{
		    	mainBTBc.insert( make_pair(key, 1) );
		    }
		}
		else
		{
			if( IsExistInN(key) )
			{
			    int temp = mainBTBn[key];
			    temp++;
			    mainBTBn[key] = temp;
		    }
		    else
	    	{
		    	mainBTBn.insert( make_pair(key, 1) );
		    }
		}
	}

	reader.close();
	symbol++;
	if(symbol == 1000) cout << "="; 
  }

  //output map
  ofstream writer_c("BranchSummaryCleared.csv");
  ofstream writer_n("BreanchSummaryNonCleared.csv");

  writer_c << "Total Number of Intervals: ," << c_intervalNum << " , Total Branches: ," << branchNum << endl;
  writer_n << "Total Number of Intervals: ," << c_intervalNum << " , Total Branches: ," << branchNum << endl;
 
  map<string, int>::iterator it;
  for(it = mainBTBc.begin(); it != mainBTBc.end(); it++)
  {
	writer_c << it->first << "," << it->second << endl;	
  }

  writer_c.close();

  map<string, int>::iterator itn;
  for(itn = mainBTBn.begin(); itn != mainBTBn.end(); itn++)
  {
	writer_n << itn->first << "," << itn->second << endl;	
  }

  writer_n.close();

  return 0;
}
